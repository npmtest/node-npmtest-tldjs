{"/home/travis/build/npmtest/node-npmtest-tldjs/test.js":"/* istanbul instrument in package npmtest_tldjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tldjs/lib.npmtest_tldjs.js":"/* istanbul instrument in package npmtest_tldjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_tldjs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_tldjs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-tldjs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-tldjs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_tldjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_tldjs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_tldjs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_tldjs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_tldjs.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_tldjs.__dirname +\n                    '/lib.npmtest_tldjs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tldjs/node_modules/tldjs/index.js":"\"use strict\";\n\nvar tld = require('./lib/tld.js').init();\ntld.rules = require('./rules.json');\n\nmodule.exports = tld;\n","/home/travis/build/npmtest/node-npmtest-tldjs/node_modules/tldjs/lib/tld.js":"\"use strict\";\n\nvar Rule = require('./rule.js');\nvar URL = require('url');\n\n/**\n * tld library\n *\n * Useable methods are those documented with an @api in JSDoc\n * See README.md for more explanations on how to use this stuff.\n */\nfunction tld () {\n  /* jshint validthis: true */\n  this.validHosts = [];\n  this.rules = [];\n}\n\ntld.init = function init () {\n  return new tld();\n};\n\nfunction trim(value) {\n  return String(value).replace(/(^\\s+|\\s+$)/g, '');\n}\n\n// Array.some() polyfill for IE8\nfunction _someFunction(value, fun /*, thisArg */) {\n    'use strict';\n\n    if (value === void 0 || value === null)\n      throw new TypeError();\n\n    var t = Object(value);\n    var len = t.length >>> 0;\n    if (typeof fun !== 'function') {\n      throw new TypeError();\n    }\n\n    var thisArg = arguments.length >= 3 ? arguments[2] : void 0;\n    for (var i = 0; i < len; i++)\n    {\n      if (i in t && fun.call(thisArg, t[i], i, t))\n        return true;\n    }\n\n    return false;\n}\n\n// Array.map polyfill for IE8\nfunction _mapFunction(thisVal, fun /*, thisArg */) {\n  \"use strict\";\n\n  if (thisVal === void 0 || thisVal === null)\n    throw new TypeError();\n\n  var t = Object(thisVal);\n  var len = t.length >>> 0;\n  if (typeof fun !== \"function\") {\n    throw new TypeError();\n  }\n\n  var res = new Array(len);\n  var thisArg = arguments.length >= 3 ? arguments[2] : void 0;\n\n  for (var i = 0; i < len; i++)\n  {\n    // NOTE: Absolute correctness would demand Object.defineProperty\n    //       be used.  But this method is fairly new, and failure is\n    //       possible only if Object.prototype or Array.prototype\n    //       has a property |i| (very unlikely), so use a lesscorrect\n    //       but more portable alternative.\n    if (i in t)\n      res[i] = fun.call(thisArg, t[i], i, t);\n  }\n\n  return res;\n};\n\n/**\n * Returns the best rule for a given host based on candidates\n *\n * @static\n * @param host {String} Hostname to check rules against\n * @param rules {Array} List of rules used to work on\n * @return {Object} Candidate object, with a normal and exception state\n */\ntld.getCandidateRule = function getCandidateRule (host, rules, options) {\n  var rule = {'normal': null, 'exception': null};\n\n  options = options || { lazy: false };\n\n  _someFunction(rules, function (r) {\n    var pattern;\n\n    // sld matching or validHost? escape the loop immediately (except if it's an exception)\n    if ('.' + host === r.getNormalXld()) {\n      if (options.lazy || r.exception || r.isHost) {\n        rule.normal = r;\n      }\n\n      return true;\n    }\n\n    // otherwise check as a complete host\n    // if it's an exception, we want to loop a bit more to a normal rule\n    pattern = '.+' + r.getNormalPattern() + '$';\n\n    if ((new RegExp(pattern)).test(host)) {\n      rule[r.exception ? 'exception' : 'normal'] = r;\n      return !r.exception;\n    }\n\n    return false;\n  });\n\n  // favouring the exception if encountered\n  // previously we were copy-altering a rule, creating inconsistent results based on rule order order\n  // @see https://github.com/oncletom/tld.js/pull/35\n  if (rule.normal && rule.exception) {\n    return rule.exception;\n  }\n\n  return rule.normal;\n};\n\n/**\n * Retrieve a subset of rules for a Top-Level-Domain string\n *\n * @param tld {String} Top-Level-Domain string\n * @return {Array} Rules subset\n */\ntld.prototype.getRulesForTld = function getRulesForTld (tld, default_rule) {\n  var exception = '!';\n  var wildcard = '*';\n  var append_tld_rule = true;\n  var rules = this.rules[tld];\n\n  // Already parsed\n  // Array.isArray polyfill for IE8\n  if (Object.prototype.toString.call(rules)  === '[object Array]') {\n    return rules;\n  }\n\n  // Nothing found, apply some default value\n  if (rules === void 0) {\n    return default_rule ? [ default_rule ] : [];\n  }\n\n  // Parsing needed\n  rules = _mapFunction(rules.split('|'), function transformAsRule (sld) {\n    var first_bit = sld[0];\n\n    if (first_bit === exception || first_bit === wildcard) {\n      sld = sld.slice(1);\n\n      if (!sld) {\n        append_tld_rule = false;\n      }\n    }\n\n    return new Rule({\n      \"firstLevel\":  tld,\n      \"secondLevel\": sld,\n      \"exception\":   first_bit === exception,\n      \"wildcard\":    first_bit === wildcard\n    });\n  });\n\n  // Always prepend to make it the latest rule to be applied\n  if (append_tld_rule) {\n    rules.unshift(new Rule({\n      \"firstLevel\": tld\n    }));\n  }\n\n  this.rules[tld] = rules.reverse();\n\n  return rules;\n};\n\n/**\n * Checks if the TLD exists for a given host\n *\n * @api\n * @param {string} host\n * @return {boolean}\n */\ntld.prototype.tldExists = function tldExists(host){\n  var hostTld;\n\n  host = tld.cleanHostValue(host);\n\n  // Easy case, it's a TLD\n  if (this.rules[host]){\n    return true;\n  }\n\n  // Popping only the TLD of the hostname\n  hostTld = tld.extractTldFromHost(host);\n\n  return this.rules[hostTld] !== undefined;\n};\n\n/**\n * Returns the public suffix (including exact matches)\n *\n * @api\n * @since 1.5\n * @param {string} host\n * @return {String}\n */\ntld.prototype.getPublicSuffix = function getPublicSuffix(host) {\n  var hostTld, rules, rule;\n\n  if (host in this.rules){\n\t  return host;\n  }\n\n  host = tld.cleanHostValue(host);\n  hostTld = tld.extractTldFromHost(host);\n  rules = this.getRulesForTld(hostTld);\n  rule = tld.getCandidateRule(host, rules, { lazy: true });\n\n  if (rule === null) {\n    return null;\n  }\n\n  return rule.getNormalXld().slice(1);\n};\n\n/**\n * Detects the domain based on rules and upon and a host string\n *\n * @api\n * @param {string} host\n * @return {String}\n */\ntld.prototype.getDomain = function getDomain (host) {\n  var domain = null, hostTld, rules, rule;\n\n  if (this.isValid(host) === false) {\n    return null;\n  }\n\n  host = tld.cleanHostValue(host);\n  hostTld = tld.extractTldFromHost(host);\n  rules = this.getRulesForTld(hostTld, new Rule({\"firstLevel\": hostTld, \"isHost\": this.validHosts.indexOf(hostTld) !== -1}));\n  rule = tld.getCandidateRule(host, rules);\n\n  if (rule === null) {\n    return null;\n  }\n\n  host.replace(new RegExp(rule.getPattern()), function (m, d) {\n    domain = d;\n  });\n\n  return domain;\n};\n\n/**\n * Returns the subdomain of a host string\n *\n * @api\n * @param {string} host\n * @return {string|null} a subdomain string if any, blank string if subdomain is empty, otherwise null\n */\ntld.prototype.getSubdomain = function getSubdomain(host){\n  var domain, r, subdomain;\n\n  host = tld.cleanHostValue(host);\n  domain = this.getDomain(host);\n\n  // No domain found? Just abort, abort!\n  if (domain === null){\n    return null;\n  }\n\n  r = '\\\\.?'+ tld.escapeRegExp(domain)+'$';\n  subdomain = host.replace(new RegExp(r, 'i'), '');\n\n  return subdomain;\n};\n\n/**\n * Checking if a host string is valid\n * It's usually a preliminary check before trying to use getDomain or anything else\n *\n * Beware: it does not check if the TLD exists.\n *\n * @api\n * @param host {String}\n * @return {Boolean}\n */\ntld.prototype.isValid = function isValid (host) {\n  return typeof host === 'string' && (this.validHosts.indexOf(host) !== -1 || (host.indexOf('.') !== -1 && host[0] !== '.'));\n};\n\n/**\n * Utility to cleanup the base host value. Also removes url fragments.\n *\n * Works for:\n * - hostname\n * - //hostname\n * - scheme://hostname\n * - scheme+scheme://hostname\n *\n * @param {string} value\n * @return {String}\n */\n\n// scheme      = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\nvar hasPrefixRE = /^(([a-z][a-z0-9+.-]*)?:)?\\/\\//;\nvar invalidHostnameChars = /[^A-Za-z0-9.-]/;\n\ntld.cleanHostValue = function cleanHostValue(value){\n  value = trim(value).toLowerCase();\n\n  var parts = URL.parse(hasPrefixRE.test(value) ? value : '//' + value, null, true);\n\n  if (parts.hostname && !invalidHostnameChars.test(parts.hostname)) { return parts.hostname; }\n  if (!invalidHostnameChars.test(value)) { return value; }\n  return '';\n};\n\n/**\n * Utility to extract the TLD from a host string\n *\n * @param {string} host\n * @return {String}\n */\ntld.extractTldFromHost = function extractTldFromHost(host){\n  return host.split('.').pop();\n};\n\n/**\n * Escapes RegExp specific chars.\n *\n * @since 1.3.1\n * @see https://github.com/oncletom/tld.js/pull/33\n * @param {String|Mixed} s\n * @returns {string} Escaped string for a safe use in a `new RegExp` expression\n */\ntld.escapeRegExp = function escapeRegExp(s) {\n  return String(s).replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n};\n\nmodule.exports = tld;\n","/home/travis/build/npmtest/node-npmtest-tldjs/node_modules/tldjs/lib/rule.js":"\"use strict\";\n\nfunction Rule (data){\n  data = data || {};\n\n  this.exception = data.exception || false;\n  this.firstLevel = data.firstLevel || '';\n  this.secondLevel = data.secondLevel || null;\n  this.isHost = data.isHost || false;\n  this.source = data.source || '';\n  this.wildcard = data.wildcard || false;\n}\n\n/**\n * Returns the TLD or SLD (Second Level Domain) pattern for a rule\n *\n * @return {String}\n */\nRule.prototype.getNormalXld = function getNormalXld(){\n  return (this.secondLevel ? '.' + this.secondLevel : '') + '.' + this.firstLevel;\n};\n\n/**\n * Returns a pattern suitable for normal rule\n * Mostly for internal use\n *\n * @return {String}\n */\nRule.prototype.getNormalPattern = function getNormalPattern(){\n  return (this.secondLevel ? '\\\\.' + this.secondLevel : '') + '\\\\.' + this.firstLevel;\n};\n\n/**\n * Returns a pattern suitable for wildcard rule\n * Mostly for internal use\n *\n * @return {String}\n */\nRule.prototype.getWildcardPattern = function getWildcardPattern(){\n  return '\\\\.[^\\\\.]+' + this.getNormalXld().replace(/\\./g, '\\\\.');\n};\n\n/**\n * Returns a pattern suitable for exception rule\n * Mostly for internal use\n *\n * @return {String}\n */\nRule.prototype.getExceptionPattern = function getExceptionPattern(){\n  return (this.secondLevel || '') + '\\\\.' + this.firstLevel;\n};\n\n/**\n * Returns the best pattern possible for a rule\n * You just have to test a value against it to check or extract a hostname\n *\n * @api\n * @param {string|undefined} before\n * @param {string|undefined} after\n * @return {String} A pattern to challenge some string against\n */\nRule.prototype.getPattern = function getPattern(before, after){\n  var pattern = '';\n\n  before = (before === undefined) ? '(': before+'';\n  after = (after === undefined) ? ')$': after+'';\n\n  if (this.exception === true){\n    pattern = this.getExceptionPattern();\n  }\n  else if (this.isHost === true) {\n    pattern = this.firstLevel;\n  }\n  else{\n    pattern = '[^\\\\.]+' + (this.wildcard ? this.getWildcardPattern() : this.getNormalPattern());\n  }\n\n  return before + pattern + after;\n};\n\nmodule.exports = Rule;\n","/home/travis/build/npmtest/node-npmtest-tldjs/node_modules/tldjs/lib/updater.js":"\"use strict\";\n\nvar join = require('path').join;\nvar http = require('https');\nvar fs = require('fs');\n\nvar pkg = require('../package.json');\n\nvar providerUrl = pkg.tldjs.providers['publicsuffix-org'];\nvar parser = require('./parsers/publicsuffix-org.js');\nvar exportTask = require('./exports/standard-json.js');\n\nmodule.exports = {\n  providerUrl: providerUrl,\n  run: function runUpdater(done){\n    done = typeof done === 'function' ? done : function(){};\n\n    var req = http.request(providerUrl, function (res) {\n      var body = '';\n\n      if (res.statusCode !== 200) {\n        res.destroy();\n        return done(new Error('tldjs: remote server responded with HTTP status ' + res.statusCode));\n      }\n\n      res.setEncoding('utf8');\n\n      res.on('data', function(d) {\n        body += d;\n      });\n\n      res.on('end', function() {\n        var tlds = parser.parse(body);\n        var task_result = exportTask(tlds);\n        var filename = task_result[0];\n        var data = task_result[1];\n\n        data = JSON.stringify(data);\n\n        fs.writeFile(join(__dirname, '..', filename), data, 'utf-8', done);\n      });\n    });\n\n    req.setTimeout(5000);\n    req.on('error', done);\n    req.end();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-tldjs/node_modules/tldjs/lib/parsers/publicsuffix-org.js":"\"use strict\";\n\nvar PublicSuffixOrgParser = {};\n\nvar punycode = require('punycode');\n\n/**\n * Parse a one-domain-per-line file\n *\n * @param body {String}\n * @return {Array}\n */\nPublicSuffixOrgParser.parse = function (body){\n  return (body+'')\n    .split(/\\n/m)\n    .filter(PublicSuffixOrgParser.filterRow)\n    .map(PublicSuffixOrgParser.domainBuilder);\n};\n\n/**\n * Returns a rule based on string analysis\n *\n * @param rule {PublicSuffixRule}\n */\nPublicSuffixOrgParser.domainBuilder = function (row){\n  var rule = {};\n  \n  row = punycode.toASCII(row.trim());\n\n  //setting initial rule\n  rule.source = row;\n\n  //exception\n  row = row.replace(/^!(.+)$/, function(m, tld){\n    rule.exception = true;\n\n    return tld;\n  });\n\n  //wildcard\n  row = row.replace(/^(\\*\\.)(.+)$/, function(m, dummy, tld){\n    rule.wildcard = true;\n\n    return tld;\n  });\n\n  //splitting domains\n  row.replace(/^((.+)\\.)?([^\\.]+)$/, function(m, dummy, secondLevel, firstLevel){\n    rule.firstLevel = firstLevel;\n\n    if (secondLevel){\n      rule.secondLevel = secondLevel;\n    }\n\n  });\n\n  return rule;\n};\n\n/**\n * Filters a commented or empty line\n *\n * @param row {String}\n * @return {String|null}\n */\nPublicSuffixOrgParser.filterRow = function (row) {\n  return (/^\\/\\//).test(row) ? null : row;\n};\n\nmodule.exports = PublicSuffixOrgParser;\n","/home/travis/build/npmtest/node-npmtest-tldjs/node_modules/tldjs/lib/exports/standard-json.js":"\"use strict\";\n\nvar Rule = require('../rule.js');\n\nmodule.exports = function standardJSONExport(xlds){\n  var data = {};\n\n  xlds.forEach(function(xld){\n    var rule = new Rule(xld);\n\n    if (!data[rule.firstLevel]){\n      data[rule.firstLevel] = [];\n    }\n\n    if (rule.wildcard){\n      data[rule.firstLevel].push('*' + (rule.secondLevel || ''));\n    }\n\n    if (rule.exception){\n      data[rule.firstLevel].push('!' + (rule.secondLevel || ''));\n    }\n\n    if (!rule.exception && !rule.wildcard && rule.secondLevel){\n      data[rule.firstLevel].push(rule.secondLevel);\n    }\n  });\n\n  // Compressing data\n  for (var tld in data){\n    data[tld] = data[tld].join('|');\n  }\n\n  return ['rules.json', data];\n};"}